openapi: 3.0.3
info:
  title: WASAPhoto
  description: |
    This is an API of an app/web page that allows the user to keep in touch with their friends by sharing, liking and commenting photos of special moments.
  version: 1.0.0
  
components:
  schemas:
    userProfile:
      title: User profile
      description: This represents a single user profile.
      type: object
      properties:
        photos:
          description: User's photos (in reverse chronological order).
          type: array
          items:
            type: string
            format: base64
          minItems: 0
          maxItems: 10000
        numberOfPhotos:
          description: Number of photos posted
          type: integer
          example: 45
        followers:
          description: List of followers.
          type: array
          items: { $ref: "#/components/schemas/username" }
          minItems: 0
          maxItems: 10000
        following:
          description: List of following users.
          type: array
          items: { $ref: "#/components/schemas/username" }
          minItems: 0
          maxItems: 10000
    userPost:
      title: User post
      description: This represents a sigle user post.
      type: object
      properties:          
        photo:
          description: The photo posted.
          type: string
          format: base64
        dateAndTime:
          description: Date and time on which the photo was posted.
          type: string
          format: date-time
          example: "2021-01-30T08:30:00Z"
        likes:
          description: Number of likes
          type: integer
          example: 56
        comments:
          description: Number of comments
          type: integer
          example: 28
    username:
      title: Username
      description: Username that everyone can see
      type: string
      pattern: "^[a-zA-Z0-9]*$"
      minLength: 3
      maxLength: 16
      example: Alice68
    photoID:
      title: PhotoID
      description: Unique photo identifier
      type: string
      minLength: 10
      maxLength: 10
      readOnly: true
  responses:
    NoContent: 
      description: "Operation successful; no response body needed."
    UnauthorizedError:
      description: Access token is missing or invalid
    NotFound:
      description: The server cannot find the requested resource.
  parameters:
    userID:
      name: userID
      in: path
      description: Unique user identifier
      schema:
        type: string
        minLength: 10
        maxLength: 10
        readOnly: true
      example: US123e4567
      required: true
    photoID:
      name: photoID
      in: path
      description: Unique photo identifier
      schema: { $ref: "#/components/schemas/photoID"}
      example: PH1234e567
      required: true
    commentID:
      name: commentID
      in: path
      description: Unique comment identifier
      schema:
        type: string
        minLength: 10
        maxLength: 10
        readOnly: true
      example: CM12345e67
      required: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

security:
  - bearerAuth: []
    
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    minLength: 12
                    maxLength: 12
                    example: "abcdef012345"
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  
  /users/:
    summary: List of users
    description: This is the list (resource) of all users.
    get:
      tags: ["profile"]
      summary: Gets user's profile
      description: |-
        If the user exists, it returns the profile; otherwise it returns an error.
      operationId: getUserProfile
      parameters: 
        - name: username
          in: query
          description: This is the username of the user whose profile we want to see.
          required: true
          schema: { $ref: "#/components/schemas/username" }
      responses:
        '200': 
          description: The resource has been fetched and transmitted in the message body.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/userProfile" }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '404': { $ref: '#/components/responses/NotFound' }
  
  /users/{userID}:
    parameters:
      - $ref: "#/components/parameters/userID"
    put:
      tags: ["update profile"]
      summary: Updates username
      description: |-
        If the username is available it uploads the old one; otherwise it notifies the user that the username is already used.
      operationId: setMyUserName
      requestBody:
        description: New username to replace the old one.
        content:
          application/json:
            schema: { $ref: "#/components/schemas/username" }
        required: true
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '400':
          description: The username has already been taken by another user.
        '401': { $ref: '#/components/responses/UnauthorizedError' }
    get:
      tags: ["stream"]
      summary: Gets user's stream.
      description: |-
        It returns a stream with following users' photos and respective information in reverse chronological order.
      operationId: getMyStream
      responses:
        '200':
          description: The request succeeded and the current stream is in response body.
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/userPost"}
                minItems: 1
                maxItems: 50
        '401': { $ref: '#/components/responses/UnauthorizedError' }
      
  /users/{userID}/followers:
    parameters:
      - $ref: "#/components/parameters/userID"
    put:
      tags: ["followers"]
      summary: Follow user
      description: Adds user to following list
      operationId: followUser
      requestBody:
        description: Username of user to be followed
        content:
          application/json:
            schema: { $ref: "#/components/schemas/username" }
        required: true
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
    delete:
      tags: ["followers"]
      summary: Unfollows user
      description: Removes user from following list
      operationId: unfollowUser
      parameters:
        - name: user
          in: query
          description: Username of user to be unfollowed
          required: true
          schema: { $ref: "#/components/schemas/username" }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }   
    
  /users/{userID}/ban:
    parameters:
      - $ref: "#/components/parameters/userID"
    put:
      tags: ["ban"]
      summary: Ban user
      description: Adds user to banned list
      operationId: banUser
      requestBody:
        description: Username of user to be banned
        content:
          application/json:
            schema: { $ref: "#/components/schemas/username" }
        required: true
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
    delete:
      tags: ["ban"]
      summary: Unbans user
      description: Removes user from banned list
      operationId: unbanUser
      parameters:
        - name: user
          in: query
          description: Username of user to be unbanned
          required: true
          schema: { $ref: "#/components/schemas/username" }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  
  /users/{userID}/photos/:
    parameters:
      - $ref: "#/components/parameters/userID"
    post:
      tags: ["update profile"]
      summary: Uploads a photo
      description: Uploads the photo send in the request body.
      operationId: uploadPhoto
      requestBody:
        description: The photo to upload on profile.
        content:
          image/png:
            schema:
              type: string
              format: base64
      responses:
        '201':
          description: Photo uploaded successfully.
          content:
            application/json:
              schema: { $ref : "#/components/schemas/photoID"}
        '401': { $ref: '#/components/responses/UnauthorizedError' }
    
  /users/{userID}/photos/{photoID}:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/photoID"
    delete:
      tags: ["update profile"]
      summary: Deletes a photo
      description: Deletes the photo from user's profile.
      operationId: deletePhoto
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
    
  /photos/{photoID}/comments:
    parameters:
      - $ref: "#/components/parameters/photoID"
    post:
      tags: ["update photo"]
      summary: Adds a comment
      description: Adds a comment to photo.
      operationId: commentPhoto
      requestBody:
        description: Content of the comment.
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { $ref: '#/components/schemas/username' }
                comment:
                  description: Comment to be uploaded
                  type: string
                  minLength: 1
                  maxLength: 300
                  example: "Nice pic!"
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
    
  /photos/{photoID}/comments/{commentID}:
    parameters:
      - $ref: "#/components/parameters/photoID"
      - $ref: "#/components/parameters/commentID"
    delete:
      tags: ["update photo"]
      summary: Deletes a comment
      description: Removes a comment from photo.
      operationId: uncommentPhoto
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        
  /photos/{photoID}/likes:
    parameters:
      - $ref: "#/components/parameters/photoID"
    put:
      tags: ["update photo"]
      summary: Add like to a photo
      description: Adds a like to the photo
      operationId: likePhoto
      requestBody:
        description: Username of user that liked the photo
        content:
          application/json:
            schema: { $ref: "#/components/schemas/username" }
        required: true
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
    delete:
      tags: ["update photo"]
      summary: Removes a like
      description: Removes a like from photo
      operationId: unlikePhoto
      parameters:
        - name: user
          in: query
          description: Username of user that liked the photo
          required: true
          schema: { $ref: "#/components/schemas/username" }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }   
  